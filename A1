#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <SPI.h>
#include <MFRC522.h>

// Nastavení WiFi
const char* ssid = "NÁZEV_SÍTĚ";
const char* password = "HESLO_SÍTĚ";

// Definice pinů pro čtečku MF RC522
#define RST_PIN     25
#define SS_PIN      26

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Vytvoření instance MFRC522

// Seznam povolených čipů
String allowedChips[] = {
  "CHIP_ID_1",
  "CHIP_ID_2",
  // Přidejte další povolené čipy podle potřeby
};

// Pin, kterým ovládáme výstup
const int outputPin = 13;

// Vytvoření instance serveru
AsyncWebServer server(80);

void setup() {
  Serial.begin(115200);
  SPI.begin();        // Inicializace SPI komunikace
  mfrc522.PCD_Init(); // Inicializace čtečky RFID RC522

  pinMode(outputPin, OUTPUT);
  digitalWrite(outputPin, LOW);

  // Připojení k WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Nastavení routování pro webovou stránku
  server.on("/", HTTP_GET, handleRoot);
  server.on("/add", HTTP_POST, handleAdd);
  server.on("/remove", HTTP_POST, handleRemove);

  // Spustíme server
  server.begin();
}

void loop() {
  // Zkontrolujeme, zda se nachází RFID čip
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String chipId = getChipId();
    Serial.print("Detected chip ID: ");
    Serial.println(chipId);

    // Zkontrolujeme, zda je detekovaný čip povolen
    if (isChipAllowed(chipId)) {
      digitalWrite(outputPin, HIGH); // Zapneme výstupní pin
      delay(1000); // Ponecháme pin zapnutý po dobu 1 sekundy
      digitalWrite(outputPin, LOW); // Vypneme výstupní pin
    }

    mfrc522.PICC_HaltA(); // Zastavíme komunikaci s čipem
  }
}

// Funkce pro získání ID čipu v hexadecimálním formátu
String getChipId() {
  String chipId = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    chipId += String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
    chipId += String(mfrc522.uid.uidByte[i], HEX);
  }
  chipId.toUpperCase();
  return chipId;
}

// Funkce pro ověření, zda je čip povolený
bool isChipAllowed(String chipId) {
  for (int i = 0; i < sizeof(allowedChips) / sizeof(allowedChips[0]); i++) {
    if (chipId == allowedChips[i]) {
      return true;
    }
  }
  return false;
}

// Obsluha hlavní stránky
void handleRoot(AsyncWebServerRequest *request) {
  String html = "<html><body>";
  html += "<h1>RFID Web Server</h1>";
  html += "<p>Detected chips:</p>";
  // Zde můžete zobrazit seznam nalezených čipů nebo jiné informace

  html += "</body></html>";
  request->send(200, "text/html", html);
}

// Obsluha přidání čipu
void handleAdd(AsyncWebServerRequest *request) {
  if (request->hasParam("chipId")) {
    String chipId = request->getParam("chipId")->value();
    // Zde můžete implementovat logiku pro přidání čipu do seznamu povolených čipů

    request->send(200, "text/plain", "Chip added successfully");
  } else {
    request->send(400, "text/plain", "Invalid request");
  }
}

// Obsluha odebrání čipu
void handleRemove(AsyncWebServerRequest *request) {
  if (request->hasParam("chipId")) {
    String chipId = request->getParam("chipId")->value();
    // Zde můžete implementovat logiku pro odebrání čipu ze seznamu povolených čipů

    request->send(200, "text/plain", "Chip removed successfully");
  } else {
    request->send(400, "text/plain", "Invalid request");
  }
}
